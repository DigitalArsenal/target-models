// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { EMT } from './EMT.js';
export class EMTCOLLECTION {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEMTCOLLECTION(bb, obj) {
        return (obj || new EMTCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEMTCOLLECTION(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EMTCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    EMITTERS(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new EMT()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    emittersLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    static startEMTCOLLECTION(builder) {
        builder.startObject(1);
    }
    static addEmitters(builder, EMITTERSOffset) {
        builder.addFieldOffset(0, EMITTERSOffset, 0);
    }
    static createEmittersVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startEmittersVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endEMTCOLLECTION(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createEMTCOLLECTION(builder, EMITTERSOffset) {
        EMTCOLLECTION.startEMTCOLLECTION(builder);
        EMTCOLLECTION.addEmitters(builder, EMITTERSOffset);
        return EMTCOLLECTION.endEMTCOLLECTION(builder);
    }
    unpack() {
        return new EMTCOLLECTIONT(this.bb.createObjList(this.EMITTERS.bind(this), this.emittersLength()));
    }
    unpackTo(_o) {
        _o.EMITTERS = this.bb.createObjList(this.EMITTERS.bind(this), this.emittersLength());
    }
}
export class EMTCOLLECTIONT {
    constructor(EMITTERS = []) {
        this.EMITTERS = EMITTERS;
    }
    pack(builder) {
        const EMITTERS = EMTCOLLECTION.createEmittersVector(builder, builder.createObjectOffsetList(this.EMITTERS));
        return EMTCOLLECTION.createEMTCOLLECTION(builder, EMITTERS);
    }
}
