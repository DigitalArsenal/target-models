// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Band } from './Band.js';
import { FrequencyRange } from './FrequencyRange.js';
import { PolarizationType } from './PolarizationType.js';
import { SimplePolarization } from './SimplePolarization.js';
import { StokesParameters } from './StokesParameters.js';
export class Emitter {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEmitter(bb, obj) {
        return (obj || new Emitter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEmitter(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new Emitter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$EMT');
    }
    ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    NAME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    UPLINK(obj) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? (obj || new FrequencyRange()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    DOWNLINK(obj) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? (obj || new FrequencyRange()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    BEACON(obj) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? (obj || new FrequencyRange()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    BAND(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? (obj || new Band()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    bandLength() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    POLARIZATION_TYPE() {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : PolarizationType.linear;
    }
    SIMPLE_POLARIZATION() {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : SimplePolarization.vertical;
    }
    STOKES_PARAMETERS(obj) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? (obj || new StokesParameters()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    }
    POWER_REQUIRED() {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    POWER_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startEmitter(builder) {
        builder.startObject(11);
    }
    static addId(builder, IDOffset) {
        builder.addFieldOffset(0, IDOffset, 0);
    }
    static addName(builder, NAMEOffset) {
        builder.addFieldOffset(1, NAMEOffset, 0);
    }
    static addUplink(builder, UPLINKOffset) {
        builder.addFieldOffset(2, UPLINKOffset, 0);
    }
    static addDownlink(builder, DOWNLINKOffset) {
        builder.addFieldOffset(3, DOWNLINKOffset, 0);
    }
    static addBeacon(builder, BEACONOffset) {
        builder.addFieldOffset(4, BEACONOffset, 0);
    }
    static addBand(builder, BANDOffset) {
        builder.addFieldOffset(5, BANDOffset, 0);
    }
    static createBandVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startBandVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addPolarizationType(builder, POLARIZATION_TYPE) {
        builder.addFieldInt8(6, POLARIZATION_TYPE, PolarizationType.linear);
    }
    static addSimplePolarization(builder, SIMPLE_POLARIZATION) {
        builder.addFieldInt8(7, SIMPLE_POLARIZATION, SimplePolarization.vertical);
    }
    static addStokesParameters(builder, STOKES_PARAMETERSOffset) {
        builder.addFieldOffset(8, STOKES_PARAMETERSOffset, 0);
    }
    static addPowerRequired(builder, POWER_REQUIRED) {
        builder.addFieldFloat64(9, POWER_REQUIRED, 0.0);
    }
    static addPowerType(builder, POWER_TYPEOffset) {
        builder.addFieldOffset(10, POWER_TYPEOffset, 0);
    }
    static endEmitter(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishEmitterBuffer(builder, offset) {
        builder.finish(offset, '$EMT');
    }
    static finishSizePrefixedEmitterBuffer(builder, offset) {
        builder.finish(offset, '$EMT', true);
    }
}
