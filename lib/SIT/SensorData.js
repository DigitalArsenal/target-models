// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
/**
 * SensorData table with detailed information about sensor data
 */
export class SensorData {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSensorData(bb, obj) {
        return (obj || new SensorData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSensorData(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SensorData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    BE_NUMBER(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CATCODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CREATED_AT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DATA_MODE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    UPDATED_BY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CREATED_BY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LAST_OB_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    ID_SENSOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DATA_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SOURCE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CLASSIFICATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    UPDATED_AT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Lower left elevation limit
     */
    LOWER_LEFT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper left azimuth limit
     */
    UPPER_LEFT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Lower right elevation limit
     */
    LOWER_RIGHT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Lower left azimuth limit
     */
    LOWER_LEFT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper right elevation limit
     */
    UPPER_RIGHT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper right azimuth limit
     */
    UPPER_RIGHT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Lower right azimuth limit
     */
    LOWER_RIGHT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper left elevation limit
     */
    UPPER_LEFT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Right geostationary belt limit
     */
    RIGHT_GEO_BELT_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Left geostationary belt limit
     */
    LEFT_GEO_BELT_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    BAND(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Magnitude limit of the sensor
     */
    MAGNITUDE_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    static startSensorData(builder) {
        builder.startObject(24);
    }
    static addBeNumber(builder, BE_NUMBEROffset) {
        builder.addFieldOffset(0, BE_NUMBEROffset, 0);
    }
    static addCatcode(builder, CATCODEOffset) {
        builder.addFieldOffset(1, CATCODEOffset, 0);
    }
    static addCreatedAt(builder, CREATED_ATOffset) {
        builder.addFieldOffset(2, CREATED_ATOffset, 0);
    }
    static addDataMode(builder, DATA_MODEOffset) {
        builder.addFieldOffset(3, DATA_MODEOffset, 0);
    }
    static addUpdatedBy(builder, UPDATED_BYOffset) {
        builder.addFieldOffset(4, UPDATED_BYOffset, 0);
    }
    static addCreatedBy(builder, CREATED_BYOffset) {
        builder.addFieldOffset(5, CREATED_BYOffset, 0);
    }
    static addLastObTime(builder, LAST_OB_TIMEOffset) {
        builder.addFieldOffset(6, LAST_OB_TIMEOffset, 0);
    }
    static addIdSensor(builder, ID_SENSOROffset) {
        builder.addFieldOffset(7, ID_SENSOROffset, 0);
    }
    static addDataId(builder, DATA_IDOffset) {
        builder.addFieldOffset(8, DATA_IDOffset, 0);
    }
    static addSource(builder, SOURCEOffset) {
        builder.addFieldOffset(9, SOURCEOffset, 0);
    }
    static addClassification(builder, CLASSIFICATIONOffset) {
        builder.addFieldOffset(10, CLASSIFICATIONOffset, 0);
    }
    static addUpdatedAt(builder, UPDATED_ATOffset) {
        builder.addFieldOffset(11, UPDATED_ATOffset, 0);
    }
    static addLowerLeftElevationLimit(builder, LOWER_LEFT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(12, LOWER_LEFT_ELEVATION_LIMIT, 0.0);
    }
    static addUpperLeftAzimuthLimit(builder, UPPER_LEFT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(13, UPPER_LEFT_AZIMUTH_LIMIT, 0.0);
    }
    static addLowerRightElevationLimit(builder, LOWER_RIGHT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(14, LOWER_RIGHT_ELEVATION_LIMIT, 0.0);
    }
    static addLowerLeftAzimuthLimit(builder, LOWER_LEFT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(15, LOWER_LEFT_AZIMUTH_LIMIT, 0.0);
    }
    static addUpperRightElevationLimit(builder, UPPER_RIGHT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(16, UPPER_RIGHT_ELEVATION_LIMIT, 0.0);
    }
    static addUpperRightAzimuthLimit(builder, UPPER_RIGHT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(17, UPPER_RIGHT_AZIMUTH_LIMIT, 0.0);
    }
    static addLowerRightAzimuthLimit(builder, LOWER_RIGHT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(18, LOWER_RIGHT_AZIMUTH_LIMIT, 0.0);
    }
    static addUpperLeftElevationLimit(builder, UPPER_LEFT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(19, UPPER_LEFT_ELEVATION_LIMIT, 0.0);
    }
    static addRightGeoBeltLimit(builder, RIGHT_GEO_BELT_LIMIT) {
        builder.addFieldFloat64(20, RIGHT_GEO_BELT_LIMIT, 0.0);
    }
    static addLeftGeoBeltLimit(builder, LEFT_GEO_BELT_LIMIT) {
        builder.addFieldFloat64(21, LEFT_GEO_BELT_LIMIT, 0.0);
    }
    static addBand(builder, BANDOffset) {
        builder.addFieldOffset(22, BANDOffset, 0);
    }
    static addMagnitudeLimit(builder, MAGNITUDE_LIMIT) {
        builder.addFieldFloat64(23, MAGNITUDE_LIMIT, 0.0);
    }
    static endSensorData(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createSensorData(builder, BE_NUMBEROffset, CATCODEOffset, CREATED_ATOffset, DATA_MODEOffset, UPDATED_BYOffset, CREATED_BYOffset, LAST_OB_TIMEOffset, ID_SENSOROffset, DATA_IDOffset, SOURCEOffset, CLASSIFICATIONOffset, UPDATED_ATOffset, LOWER_LEFT_ELEVATION_LIMIT, UPPER_LEFT_AZIMUTH_LIMIT, LOWER_RIGHT_ELEVATION_LIMIT, LOWER_LEFT_AZIMUTH_LIMIT, UPPER_RIGHT_ELEVATION_LIMIT, UPPER_RIGHT_AZIMUTH_LIMIT, LOWER_RIGHT_AZIMUTH_LIMIT, UPPER_LEFT_ELEVATION_LIMIT, RIGHT_GEO_BELT_LIMIT, LEFT_GEO_BELT_LIMIT, BANDOffset, MAGNITUDE_LIMIT) {
        SensorData.startSensorData(builder);
        SensorData.addBeNumber(builder, BE_NUMBEROffset);
        SensorData.addCatcode(builder, CATCODEOffset);
        SensorData.addCreatedAt(builder, CREATED_ATOffset);
        SensorData.addDataMode(builder, DATA_MODEOffset);
        SensorData.addUpdatedBy(builder, UPDATED_BYOffset);
        SensorData.addCreatedBy(builder, CREATED_BYOffset);
        SensorData.addLastObTime(builder, LAST_OB_TIMEOffset);
        SensorData.addIdSensor(builder, ID_SENSOROffset);
        SensorData.addDataId(builder, DATA_IDOffset);
        SensorData.addSource(builder, SOURCEOffset);
        SensorData.addClassification(builder, CLASSIFICATIONOffset);
        SensorData.addUpdatedAt(builder, UPDATED_ATOffset);
        SensorData.addLowerLeftElevationLimit(builder, LOWER_LEFT_ELEVATION_LIMIT);
        SensorData.addUpperLeftAzimuthLimit(builder, UPPER_LEFT_AZIMUTH_LIMIT);
        SensorData.addLowerRightElevationLimit(builder, LOWER_RIGHT_ELEVATION_LIMIT);
        SensorData.addLowerLeftAzimuthLimit(builder, LOWER_LEFT_AZIMUTH_LIMIT);
        SensorData.addUpperRightElevationLimit(builder, UPPER_RIGHT_ELEVATION_LIMIT);
        SensorData.addUpperRightAzimuthLimit(builder, UPPER_RIGHT_AZIMUTH_LIMIT);
        SensorData.addLowerRightAzimuthLimit(builder, LOWER_RIGHT_AZIMUTH_LIMIT);
        SensorData.addUpperLeftElevationLimit(builder, UPPER_LEFT_ELEVATION_LIMIT);
        SensorData.addRightGeoBeltLimit(builder, RIGHT_GEO_BELT_LIMIT);
        SensorData.addLeftGeoBeltLimit(builder, LEFT_GEO_BELT_LIMIT);
        SensorData.addBand(builder, BANDOffset);
        SensorData.addMagnitudeLimit(builder, MAGNITUDE_LIMIT);
        return SensorData.endSensorData(builder);
    }
    unpack() {
        return new SensorDataT(this.BE_NUMBER(), this.CATCODE(), this.CREATED_AT(), this.DATA_MODE(), this.UPDATED_BY(), this.CREATED_BY(), this.LAST_OB_TIME(), this.ID_SENSOR(), this.DATA_ID(), this.SOURCE(), this.CLASSIFICATION(), this.UPDATED_AT(), this.LOWER_LEFT_ELEVATION_LIMIT(), this.UPPER_LEFT_AZIMUTH_LIMIT(), this.LOWER_RIGHT_ELEVATION_LIMIT(), this.LOWER_LEFT_AZIMUTH_LIMIT(), this.UPPER_RIGHT_ELEVATION_LIMIT(), this.UPPER_RIGHT_AZIMUTH_LIMIT(), this.LOWER_RIGHT_AZIMUTH_LIMIT(), this.UPPER_LEFT_ELEVATION_LIMIT(), this.RIGHT_GEO_BELT_LIMIT(), this.LEFT_GEO_BELT_LIMIT(), this.BAND(), this.MAGNITUDE_LIMIT());
    }
    unpackTo(_o) {
        _o.BE_NUMBER = this.BE_NUMBER();
        _o.CATCODE = this.CATCODE();
        _o.CREATED_AT = this.CREATED_AT();
        _o.DATA_MODE = this.DATA_MODE();
        _o.UPDATED_BY = this.UPDATED_BY();
        _o.CREATED_BY = this.CREATED_BY();
        _o.LAST_OB_TIME = this.LAST_OB_TIME();
        _o.ID_SENSOR = this.ID_SENSOR();
        _o.DATA_ID = this.DATA_ID();
        _o.SOURCE = this.SOURCE();
        _o.CLASSIFICATION = this.CLASSIFICATION();
        _o.UPDATED_AT = this.UPDATED_AT();
        _o.LOWER_LEFT_ELEVATION_LIMIT = this.LOWER_LEFT_ELEVATION_LIMIT();
        _o.UPPER_LEFT_AZIMUTH_LIMIT = this.UPPER_LEFT_AZIMUTH_LIMIT();
        _o.LOWER_RIGHT_ELEVATION_LIMIT = this.LOWER_RIGHT_ELEVATION_LIMIT();
        _o.LOWER_LEFT_AZIMUTH_LIMIT = this.LOWER_LEFT_AZIMUTH_LIMIT();
        _o.UPPER_RIGHT_ELEVATION_LIMIT = this.UPPER_RIGHT_ELEVATION_LIMIT();
        _o.UPPER_RIGHT_AZIMUTH_LIMIT = this.UPPER_RIGHT_AZIMUTH_LIMIT();
        _o.LOWER_RIGHT_AZIMUTH_LIMIT = this.LOWER_RIGHT_AZIMUTH_LIMIT();
        _o.UPPER_LEFT_ELEVATION_LIMIT = this.UPPER_LEFT_ELEVATION_LIMIT();
        _o.RIGHT_GEO_BELT_LIMIT = this.RIGHT_GEO_BELT_LIMIT();
        _o.LEFT_GEO_BELT_LIMIT = this.LEFT_GEO_BELT_LIMIT();
        _o.BAND = this.BAND();
        _o.MAGNITUDE_LIMIT = this.MAGNITUDE_LIMIT();
    }
}
export class SensorDataT {
    constructor(BE_NUMBER = null, CATCODE = null, CREATED_AT = null, DATA_MODE = null, UPDATED_BY = null, CREATED_BY = null, LAST_OB_TIME = null, ID_SENSOR = null, DATA_ID = null, SOURCE = null, CLASSIFICATION = null, UPDATED_AT = null, LOWER_LEFT_ELEVATION_LIMIT = 0.0, UPPER_LEFT_AZIMUTH_LIMIT = 0.0, LOWER_RIGHT_ELEVATION_LIMIT = 0.0, LOWER_LEFT_AZIMUTH_LIMIT = 0.0, UPPER_RIGHT_ELEVATION_LIMIT = 0.0, UPPER_RIGHT_AZIMUTH_LIMIT = 0.0, LOWER_RIGHT_AZIMUTH_LIMIT = 0.0, UPPER_LEFT_ELEVATION_LIMIT = 0.0, RIGHT_GEO_BELT_LIMIT = 0.0, LEFT_GEO_BELT_LIMIT = 0.0, BAND = null, MAGNITUDE_LIMIT = 0.0) {
        this.BE_NUMBER = BE_NUMBER;
        this.CATCODE = CATCODE;
        this.CREATED_AT = CREATED_AT;
        this.DATA_MODE = DATA_MODE;
        this.UPDATED_BY = UPDATED_BY;
        this.CREATED_BY = CREATED_BY;
        this.LAST_OB_TIME = LAST_OB_TIME;
        this.ID_SENSOR = ID_SENSOR;
        this.DATA_ID = DATA_ID;
        this.SOURCE = SOURCE;
        this.CLASSIFICATION = CLASSIFICATION;
        this.UPDATED_AT = UPDATED_AT;
        this.LOWER_LEFT_ELEVATION_LIMIT = LOWER_LEFT_ELEVATION_LIMIT;
        this.UPPER_LEFT_AZIMUTH_LIMIT = UPPER_LEFT_AZIMUTH_LIMIT;
        this.LOWER_RIGHT_ELEVATION_LIMIT = LOWER_RIGHT_ELEVATION_LIMIT;
        this.LOWER_LEFT_AZIMUTH_LIMIT = LOWER_LEFT_AZIMUTH_LIMIT;
        this.UPPER_RIGHT_ELEVATION_LIMIT = UPPER_RIGHT_ELEVATION_LIMIT;
        this.UPPER_RIGHT_AZIMUTH_LIMIT = UPPER_RIGHT_AZIMUTH_LIMIT;
        this.LOWER_RIGHT_AZIMUTH_LIMIT = LOWER_RIGHT_AZIMUTH_LIMIT;
        this.UPPER_LEFT_ELEVATION_LIMIT = UPPER_LEFT_ELEVATION_LIMIT;
        this.RIGHT_GEO_BELT_LIMIT = RIGHT_GEO_BELT_LIMIT;
        this.LEFT_GEO_BELT_LIMIT = LEFT_GEO_BELT_LIMIT;
        this.BAND = BAND;
        this.MAGNITUDE_LIMIT = MAGNITUDE_LIMIT;
    }
    pack(builder) {
        const BE_NUMBER = (this.BE_NUMBER !== null ? builder.createString(this.BE_NUMBER) : 0);
        const CATCODE = (this.CATCODE !== null ? builder.createString(this.CATCODE) : 0);
        const CREATED_AT = (this.CREATED_AT !== null ? builder.createString(this.CREATED_AT) : 0);
        const DATA_MODE = (this.DATA_MODE !== null ? builder.createString(this.DATA_MODE) : 0);
        const UPDATED_BY = (this.UPDATED_BY !== null ? builder.createString(this.UPDATED_BY) : 0);
        const CREATED_BY = (this.CREATED_BY !== null ? builder.createString(this.CREATED_BY) : 0);
        const LAST_OB_TIME = (this.LAST_OB_TIME !== null ? builder.createString(this.LAST_OB_TIME) : 0);
        const ID_SENSOR = (this.ID_SENSOR !== null ? builder.createString(this.ID_SENSOR) : 0);
        const DATA_ID = (this.DATA_ID !== null ? builder.createString(this.DATA_ID) : 0);
        const SOURCE = (this.SOURCE !== null ? builder.createString(this.SOURCE) : 0);
        const CLASSIFICATION = (this.CLASSIFICATION !== null ? builder.createString(this.CLASSIFICATION) : 0);
        const UPDATED_AT = (this.UPDATED_AT !== null ? builder.createString(this.UPDATED_AT) : 0);
        const BAND = (this.BAND !== null ? builder.createString(this.BAND) : 0);
        return SensorData.createSensorData(builder, BE_NUMBER, CATCODE, CREATED_AT, DATA_MODE, UPDATED_BY, CREATED_BY, LAST_OB_TIME, ID_SENSOR, DATA_ID, SOURCE, CLASSIFICATION, UPDATED_AT, this.LOWER_LEFT_ELEVATION_LIMIT, this.UPPER_LEFT_AZIMUTH_LIMIT, this.LOWER_RIGHT_ELEVATION_LIMIT, this.LOWER_LEFT_AZIMUTH_LIMIT, this.UPPER_RIGHT_ELEVATION_LIMIT, this.UPPER_RIGHT_AZIMUTH_LIMIT, this.LOWER_RIGHT_AZIMUTH_LIMIT, this.UPPER_LEFT_ELEVATION_LIMIT, this.RIGHT_GEO_BELT_LIMIT, this.LEFT_GEO_BELT_LIMIT, BAND, this.MAGNITUDE_LIMIT);
    }
}
