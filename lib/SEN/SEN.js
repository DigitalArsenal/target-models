// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { DataMode } from './DataMode.js';
/**
 * SEN table combining SensorData and SIT
 */
export class SEN {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsSEN(bb, obj) {
        return (obj || new SEN()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsSEN(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new SEN()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static bufferHasIdentifier(bb) {
        return bb.__has_identifier('$SEN');
    }
    /**
     * Latitude of the site
     */
    LATITUDE() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Longitude of the site
     */
    LONGITUDE() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    /**
     * Altitude of the site
     */
    ALTITUDE() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readFloat32(this.bb_pos + offset) : 0.0;
    }
    CREATED_AT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CREATED_BY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Mode of the data (real, simulated, synthetic)
     */
    DATA_MODE() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readInt8(this.bb_pos + offset) : DataMode.real;
    }
    ID_SENSOR(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 16);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SITE_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 18);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SENSOR_TYPE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 20);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SENSOR_TYPE_SHORT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 22);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    SOURCE(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 24);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    DATA_ID(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 26);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    CLASSIFICATION(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 28);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    UPDATED_AT(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 30);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    UPDATED_BY(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 32);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    LAST_OB_TIME(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 34);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Lower left elevation limit
     */
    LOWER_LEFT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 36);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper left azimuth limit
     */
    UPPER_LEFT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 38);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Lower right elevation limit
     */
    LOWER_RIGHT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 40);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Lower left azimuth limit
     */
    LOWER_LEFT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 42);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper right elevation limit
     */
    UPPER_RIGHT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 44);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper right azimuth limit
     */
    UPPER_RIGHT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 46);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Lower right azimuth limit
     */
    LOWER_RIGHT_AZIMUTH_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 48);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Upper left elevation limit
     */
    UPPER_LEFT_ELEVATION_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 50);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Right geostationary belt limit
     */
    RIGHT_GEO_BELT_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 52);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Left geostationary belt limit
     */
    LEFT_GEO_BELT_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 54);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    BAND(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 56);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    /**
     * Magnitude limit of the sensor
     */
    MAGNITUDE_LIMIT() {
        const offset = this.bb.__offset(this.bb_pos, 58);
        return offset ? this.bb.readFloat64(this.bb_pos + offset) : 0.0;
    }
    /**
     * Indicates if the site is taskable
     */
    TASKABLE() {
        const offset = this.bb.__offset(this.bb_pos, 60);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startSEN(builder) {
        builder.startObject(29);
    }
    static addLatitude(builder, LATITUDE) {
        builder.addFieldFloat32(0, LATITUDE, 0.0);
    }
    static addLongitude(builder, LONGITUDE) {
        builder.addFieldFloat32(1, LONGITUDE, 0.0);
    }
    static addAltitude(builder, ALTITUDE) {
        builder.addFieldFloat32(2, ALTITUDE, 0.0);
    }
    static addCreatedAt(builder, CREATED_ATOffset) {
        builder.addFieldOffset(3, CREATED_ATOffset, 0);
    }
    static addCreatedBy(builder, CREATED_BYOffset) {
        builder.addFieldOffset(4, CREATED_BYOffset, 0);
    }
    static addDataMode(builder, DATA_MODE) {
        builder.addFieldInt8(5, DATA_MODE, DataMode.real);
    }
    static addIdSensor(builder, ID_SENSOROffset) {
        builder.addFieldOffset(6, ID_SENSOROffset, 0);
    }
    static addSiteId(builder, SITE_IDOffset) {
        builder.addFieldOffset(7, SITE_IDOffset, 0);
    }
    static addSensorType(builder, SENSOR_TYPEOffset) {
        builder.addFieldOffset(8, SENSOR_TYPEOffset, 0);
    }
    static addSensorTypeShort(builder, SENSOR_TYPE_SHORTOffset) {
        builder.addFieldOffset(9, SENSOR_TYPE_SHORTOffset, 0);
    }
    static addSource(builder, SOURCEOffset) {
        builder.addFieldOffset(10, SOURCEOffset, 0);
    }
    static addDataId(builder, DATA_IDOffset) {
        builder.addFieldOffset(11, DATA_IDOffset, 0);
    }
    static addClassification(builder, CLASSIFICATIONOffset) {
        builder.addFieldOffset(12, CLASSIFICATIONOffset, 0);
    }
    static addUpdatedAt(builder, UPDATED_ATOffset) {
        builder.addFieldOffset(13, UPDATED_ATOffset, 0);
    }
    static addUpdatedBy(builder, UPDATED_BYOffset) {
        builder.addFieldOffset(14, UPDATED_BYOffset, 0);
    }
    static addLastObTime(builder, LAST_OB_TIMEOffset) {
        builder.addFieldOffset(15, LAST_OB_TIMEOffset, 0);
    }
    static addLowerLeftElevationLimit(builder, LOWER_LEFT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(16, LOWER_LEFT_ELEVATION_LIMIT, 0.0);
    }
    static addUpperLeftAzimuthLimit(builder, UPPER_LEFT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(17, UPPER_LEFT_AZIMUTH_LIMIT, 0.0);
    }
    static addLowerRightElevationLimit(builder, LOWER_RIGHT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(18, LOWER_RIGHT_ELEVATION_LIMIT, 0.0);
    }
    static addLowerLeftAzimuthLimit(builder, LOWER_LEFT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(19, LOWER_LEFT_AZIMUTH_LIMIT, 0.0);
    }
    static addUpperRightElevationLimit(builder, UPPER_RIGHT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(20, UPPER_RIGHT_ELEVATION_LIMIT, 0.0);
    }
    static addUpperRightAzimuthLimit(builder, UPPER_RIGHT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(21, UPPER_RIGHT_AZIMUTH_LIMIT, 0.0);
    }
    static addLowerRightAzimuthLimit(builder, LOWER_RIGHT_AZIMUTH_LIMIT) {
        builder.addFieldFloat64(22, LOWER_RIGHT_AZIMUTH_LIMIT, 0.0);
    }
    static addUpperLeftElevationLimit(builder, UPPER_LEFT_ELEVATION_LIMIT) {
        builder.addFieldFloat64(23, UPPER_LEFT_ELEVATION_LIMIT, 0.0);
    }
    static addRightGeoBeltLimit(builder, RIGHT_GEO_BELT_LIMIT) {
        builder.addFieldFloat64(24, RIGHT_GEO_BELT_LIMIT, 0.0);
    }
    static addLeftGeoBeltLimit(builder, LEFT_GEO_BELT_LIMIT) {
        builder.addFieldFloat64(25, LEFT_GEO_BELT_LIMIT, 0.0);
    }
    static addBand(builder, BANDOffset) {
        builder.addFieldOffset(26, BANDOffset, 0);
    }
    static addMagnitudeLimit(builder, MAGNITUDE_LIMIT) {
        builder.addFieldFloat64(27, MAGNITUDE_LIMIT, 0.0);
    }
    static addTaskable(builder, TASKABLE) {
        builder.addFieldInt8(28, +TASKABLE, +false);
    }
    static endSEN(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static finishSENBuffer(builder, offset) {
        builder.finish(offset, '$SEN');
    }
    static finishSizePrefixedSENBuffer(builder, offset) {
        builder.finish(offset, '$SEN', true);
    }
    static createSEN(builder, LATITUDE, LONGITUDE, ALTITUDE, CREATED_ATOffset, CREATED_BYOffset, DATA_MODE, ID_SENSOROffset, SITE_IDOffset, SENSOR_TYPEOffset, SENSOR_TYPE_SHORTOffset, SOURCEOffset, DATA_IDOffset, CLASSIFICATIONOffset, UPDATED_ATOffset, UPDATED_BYOffset, LAST_OB_TIMEOffset, LOWER_LEFT_ELEVATION_LIMIT, UPPER_LEFT_AZIMUTH_LIMIT, LOWER_RIGHT_ELEVATION_LIMIT, LOWER_LEFT_AZIMUTH_LIMIT, UPPER_RIGHT_ELEVATION_LIMIT, UPPER_RIGHT_AZIMUTH_LIMIT, LOWER_RIGHT_AZIMUTH_LIMIT, UPPER_LEFT_ELEVATION_LIMIT, RIGHT_GEO_BELT_LIMIT, LEFT_GEO_BELT_LIMIT, BANDOffset, MAGNITUDE_LIMIT, TASKABLE) {
        SEN.startSEN(builder);
        SEN.addLatitude(builder, LATITUDE);
        SEN.addLongitude(builder, LONGITUDE);
        SEN.addAltitude(builder, ALTITUDE);
        SEN.addCreatedAt(builder, CREATED_ATOffset);
        SEN.addCreatedBy(builder, CREATED_BYOffset);
        SEN.addDataMode(builder, DATA_MODE);
        SEN.addIdSensor(builder, ID_SENSOROffset);
        SEN.addSiteId(builder, SITE_IDOffset);
        SEN.addSensorType(builder, SENSOR_TYPEOffset);
        SEN.addSensorTypeShort(builder, SENSOR_TYPE_SHORTOffset);
        SEN.addSource(builder, SOURCEOffset);
        SEN.addDataId(builder, DATA_IDOffset);
        SEN.addClassification(builder, CLASSIFICATIONOffset);
        SEN.addUpdatedAt(builder, UPDATED_ATOffset);
        SEN.addUpdatedBy(builder, UPDATED_BYOffset);
        SEN.addLastObTime(builder, LAST_OB_TIMEOffset);
        SEN.addLowerLeftElevationLimit(builder, LOWER_LEFT_ELEVATION_LIMIT);
        SEN.addUpperLeftAzimuthLimit(builder, UPPER_LEFT_AZIMUTH_LIMIT);
        SEN.addLowerRightElevationLimit(builder, LOWER_RIGHT_ELEVATION_LIMIT);
        SEN.addLowerLeftAzimuthLimit(builder, LOWER_LEFT_AZIMUTH_LIMIT);
        SEN.addUpperRightElevationLimit(builder, UPPER_RIGHT_ELEVATION_LIMIT);
        SEN.addUpperRightAzimuthLimit(builder, UPPER_RIGHT_AZIMUTH_LIMIT);
        SEN.addLowerRightAzimuthLimit(builder, LOWER_RIGHT_AZIMUTH_LIMIT);
        SEN.addUpperLeftElevationLimit(builder, UPPER_LEFT_ELEVATION_LIMIT);
        SEN.addRightGeoBeltLimit(builder, RIGHT_GEO_BELT_LIMIT);
        SEN.addLeftGeoBeltLimit(builder, LEFT_GEO_BELT_LIMIT);
        SEN.addBand(builder, BANDOffset);
        SEN.addMagnitudeLimit(builder, MAGNITUDE_LIMIT);
        SEN.addTaskable(builder, TASKABLE);
        return SEN.endSEN(builder);
    }
    unpack() {
        return new SENT(this.LATITUDE(), this.LONGITUDE(), this.ALTITUDE(), this.CREATED_AT(), this.CREATED_BY(), this.DATA_MODE(), this.ID_SENSOR(), this.SITE_ID(), this.SENSOR_TYPE(), this.SENSOR_TYPE_SHORT(), this.SOURCE(), this.DATA_ID(), this.CLASSIFICATION(), this.UPDATED_AT(), this.UPDATED_BY(), this.LAST_OB_TIME(), this.LOWER_LEFT_ELEVATION_LIMIT(), this.UPPER_LEFT_AZIMUTH_LIMIT(), this.LOWER_RIGHT_ELEVATION_LIMIT(), this.LOWER_LEFT_AZIMUTH_LIMIT(), this.UPPER_RIGHT_ELEVATION_LIMIT(), this.UPPER_RIGHT_AZIMUTH_LIMIT(), this.LOWER_RIGHT_AZIMUTH_LIMIT(), this.UPPER_LEFT_ELEVATION_LIMIT(), this.RIGHT_GEO_BELT_LIMIT(), this.LEFT_GEO_BELT_LIMIT(), this.BAND(), this.MAGNITUDE_LIMIT(), this.TASKABLE());
    }
    unpackTo(_o) {
        _o.LATITUDE = this.LATITUDE();
        _o.LONGITUDE = this.LONGITUDE();
        _o.ALTITUDE = this.ALTITUDE();
        _o.CREATED_AT = this.CREATED_AT();
        _o.CREATED_BY = this.CREATED_BY();
        _o.DATA_MODE = this.DATA_MODE();
        _o.ID_SENSOR = this.ID_SENSOR();
        _o.SITE_ID = this.SITE_ID();
        _o.SENSOR_TYPE = this.SENSOR_TYPE();
        _o.SENSOR_TYPE_SHORT = this.SENSOR_TYPE_SHORT();
        _o.SOURCE = this.SOURCE();
        _o.DATA_ID = this.DATA_ID();
        _o.CLASSIFICATION = this.CLASSIFICATION();
        _o.UPDATED_AT = this.UPDATED_AT();
        _o.UPDATED_BY = this.UPDATED_BY();
        _o.LAST_OB_TIME = this.LAST_OB_TIME();
        _o.LOWER_LEFT_ELEVATION_LIMIT = this.LOWER_LEFT_ELEVATION_LIMIT();
        _o.UPPER_LEFT_AZIMUTH_LIMIT = this.UPPER_LEFT_AZIMUTH_LIMIT();
        _o.LOWER_RIGHT_ELEVATION_LIMIT = this.LOWER_RIGHT_ELEVATION_LIMIT();
        _o.LOWER_LEFT_AZIMUTH_LIMIT = this.LOWER_LEFT_AZIMUTH_LIMIT();
        _o.UPPER_RIGHT_ELEVATION_LIMIT = this.UPPER_RIGHT_ELEVATION_LIMIT();
        _o.UPPER_RIGHT_AZIMUTH_LIMIT = this.UPPER_RIGHT_AZIMUTH_LIMIT();
        _o.LOWER_RIGHT_AZIMUTH_LIMIT = this.LOWER_RIGHT_AZIMUTH_LIMIT();
        _o.UPPER_LEFT_ELEVATION_LIMIT = this.UPPER_LEFT_ELEVATION_LIMIT();
        _o.RIGHT_GEO_BELT_LIMIT = this.RIGHT_GEO_BELT_LIMIT();
        _o.LEFT_GEO_BELT_LIMIT = this.LEFT_GEO_BELT_LIMIT();
        _o.BAND = this.BAND();
        _o.MAGNITUDE_LIMIT = this.MAGNITUDE_LIMIT();
        _o.TASKABLE = this.TASKABLE();
    }
}
export class SENT {
    constructor(LATITUDE = 0.0, LONGITUDE = 0.0, ALTITUDE = 0.0, CREATED_AT = null, CREATED_BY = null, DATA_MODE = DataMode.real, ID_SENSOR = null, SITE_ID = null, SENSOR_TYPE = null, SENSOR_TYPE_SHORT = null, SOURCE = null, DATA_ID = null, CLASSIFICATION = null, UPDATED_AT = null, UPDATED_BY = null, LAST_OB_TIME = null, LOWER_LEFT_ELEVATION_LIMIT = 0.0, UPPER_LEFT_AZIMUTH_LIMIT = 0.0, LOWER_RIGHT_ELEVATION_LIMIT = 0.0, LOWER_LEFT_AZIMUTH_LIMIT = 0.0, UPPER_RIGHT_ELEVATION_LIMIT = 0.0, UPPER_RIGHT_AZIMUTH_LIMIT = 0.0, LOWER_RIGHT_AZIMUTH_LIMIT = 0.0, UPPER_LEFT_ELEVATION_LIMIT = 0.0, RIGHT_GEO_BELT_LIMIT = 0.0, LEFT_GEO_BELT_LIMIT = 0.0, BAND = null, MAGNITUDE_LIMIT = 0.0, TASKABLE = false) {
        this.LATITUDE = LATITUDE;
        this.LONGITUDE = LONGITUDE;
        this.ALTITUDE = ALTITUDE;
        this.CREATED_AT = CREATED_AT;
        this.CREATED_BY = CREATED_BY;
        this.DATA_MODE = DATA_MODE;
        this.ID_SENSOR = ID_SENSOR;
        this.SITE_ID = SITE_ID;
        this.SENSOR_TYPE = SENSOR_TYPE;
        this.SENSOR_TYPE_SHORT = SENSOR_TYPE_SHORT;
        this.SOURCE = SOURCE;
        this.DATA_ID = DATA_ID;
        this.CLASSIFICATION = CLASSIFICATION;
        this.UPDATED_AT = UPDATED_AT;
        this.UPDATED_BY = UPDATED_BY;
        this.LAST_OB_TIME = LAST_OB_TIME;
        this.LOWER_LEFT_ELEVATION_LIMIT = LOWER_LEFT_ELEVATION_LIMIT;
        this.UPPER_LEFT_AZIMUTH_LIMIT = UPPER_LEFT_AZIMUTH_LIMIT;
        this.LOWER_RIGHT_ELEVATION_LIMIT = LOWER_RIGHT_ELEVATION_LIMIT;
        this.LOWER_LEFT_AZIMUTH_LIMIT = LOWER_LEFT_AZIMUTH_LIMIT;
        this.UPPER_RIGHT_ELEVATION_LIMIT = UPPER_RIGHT_ELEVATION_LIMIT;
        this.UPPER_RIGHT_AZIMUTH_LIMIT = UPPER_RIGHT_AZIMUTH_LIMIT;
        this.LOWER_RIGHT_AZIMUTH_LIMIT = LOWER_RIGHT_AZIMUTH_LIMIT;
        this.UPPER_LEFT_ELEVATION_LIMIT = UPPER_LEFT_ELEVATION_LIMIT;
        this.RIGHT_GEO_BELT_LIMIT = RIGHT_GEO_BELT_LIMIT;
        this.LEFT_GEO_BELT_LIMIT = LEFT_GEO_BELT_LIMIT;
        this.BAND = BAND;
        this.MAGNITUDE_LIMIT = MAGNITUDE_LIMIT;
        this.TASKABLE = TASKABLE;
    }
    pack(builder) {
        const CREATED_AT = (this.CREATED_AT !== null ? builder.createString(this.CREATED_AT) : 0);
        const CREATED_BY = (this.CREATED_BY !== null ? builder.createString(this.CREATED_BY) : 0);
        const ID_SENSOR = (this.ID_SENSOR !== null ? builder.createString(this.ID_SENSOR) : 0);
        const SITE_ID = (this.SITE_ID !== null ? builder.createString(this.SITE_ID) : 0);
        const SENSOR_TYPE = (this.SENSOR_TYPE !== null ? builder.createString(this.SENSOR_TYPE) : 0);
        const SENSOR_TYPE_SHORT = (this.SENSOR_TYPE_SHORT !== null ? builder.createString(this.SENSOR_TYPE_SHORT) : 0);
        const SOURCE = (this.SOURCE !== null ? builder.createString(this.SOURCE) : 0);
        const DATA_ID = (this.DATA_ID !== null ? builder.createString(this.DATA_ID) : 0);
        const CLASSIFICATION = (this.CLASSIFICATION !== null ? builder.createString(this.CLASSIFICATION) : 0);
        const UPDATED_AT = (this.UPDATED_AT !== null ? builder.createString(this.UPDATED_AT) : 0);
        const UPDATED_BY = (this.UPDATED_BY !== null ? builder.createString(this.UPDATED_BY) : 0);
        const LAST_OB_TIME = (this.LAST_OB_TIME !== null ? builder.createString(this.LAST_OB_TIME) : 0);
        const BAND = (this.BAND !== null ? builder.createString(this.BAND) : 0);
        return SEN.createSEN(builder, this.LATITUDE, this.LONGITUDE, this.ALTITUDE, CREATED_AT, CREATED_BY, this.DATA_MODE, ID_SENSOR, SITE_ID, SENSOR_TYPE, SENSOR_TYPE_SHORT, SOURCE, DATA_ID, CLASSIFICATION, UPDATED_AT, UPDATED_BY, LAST_OB_TIME, this.LOWER_LEFT_ELEVATION_LIMIT, this.UPPER_LEFT_AZIMUTH_LIMIT, this.LOWER_RIGHT_ELEVATION_LIMIT, this.LOWER_LEFT_AZIMUTH_LIMIT, this.UPPER_RIGHT_ELEVATION_LIMIT, this.UPPER_RIGHT_AZIMUTH_LIMIT, this.LOWER_RIGHT_AZIMUTH_LIMIT, this.UPPER_LEFT_ELEVATION_LIMIT, this.RIGHT_GEO_BELT_LIMIT, this.LEFT_GEO_BELT_LIMIT, BAND, this.MAGNITUDE_LIMIT, this.TASKABLE);
    }
}
