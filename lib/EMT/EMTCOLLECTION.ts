// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { EMT, EMTT } from './EMT.js';


export class EMTCOLLECTION implements flatbuffers.IUnpackableObject<EMTCOLLECTIONT> {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EMTCOLLECTION {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEMTCOLLECTION(bb:flatbuffers.ByteBuffer, obj?:EMTCOLLECTION):EMTCOLLECTION {
  return (obj || new EMTCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEMTCOLLECTION(bb:flatbuffers.ByteBuffer, obj?:EMTCOLLECTION):EMTCOLLECTION {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EMTCOLLECTION()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

EMITTERS(index: number, obj?:EMT):EMT|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new EMT()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

emittersLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startEMTCOLLECTION(builder:flatbuffers.Builder) {
  builder.startObject(1);
}

static addEmitters(builder:flatbuffers.Builder, EMITTERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, EMITTERSOffset, 0);
}

static createEmittersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startEmittersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endEMTCOLLECTION(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEMTCOLLECTION(builder:flatbuffers.Builder, EMITTERSOffset:flatbuffers.Offset):flatbuffers.Offset {
  EMTCOLLECTION.startEMTCOLLECTION(builder);
  EMTCOLLECTION.addEmitters(builder, EMITTERSOffset);
  return EMTCOLLECTION.endEMTCOLLECTION(builder);
}

unpack(): EMTCOLLECTIONT {
  return new EMTCOLLECTIONT(
    this.bb!.createObjList<EMT, EMTT>(this.EMITTERS.bind(this), this.emittersLength())
  );
}


unpackTo(_o: EMTCOLLECTIONT): void {
  _o.EMITTERS = this.bb!.createObjList<EMT, EMTT>(this.EMITTERS.bind(this), this.emittersLength());
}
}

export class EMTCOLLECTIONT implements flatbuffers.IGeneratedObject {
constructor(
  public EMITTERS: (EMTT)[] = []
){}


pack(builder:flatbuffers.Builder): flatbuffers.Offset {
  const EMITTERS = EMTCOLLECTION.createEmittersVector(builder, builder.createObjectOffsetList(this.EMITTERS));

  return EMTCOLLECTION.createEMTCOLLECTION(builder,
    EMITTERS
  );
}
}
