// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class FrequencyRange {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):FrequencyRange {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsFrequencyRange(bb:flatbuffers.ByteBuffer, obj?:FrequencyRange):FrequencyRange {
  return (obj || new FrequencyRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsFrequencyRange(bb:flatbuffers.ByteBuffer, obj?:FrequencyRange):FrequencyRange {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new FrequencyRange()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

LOWER():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

UPPER():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

static startFrequencyRange(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addLower(builder:flatbuffers.Builder, LOWER:number) {
  builder.addFieldFloat64(0, LOWER, 0.0);
}

static addUpper(builder:flatbuffers.Builder, UPPER:number) {
  builder.addFieldFloat64(1, UPPER, 0.0);
}

static endFrequencyRange(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createFrequencyRange(builder:flatbuffers.Builder, LOWER:number, UPPER:number):flatbuffers.Offset {
  FrequencyRange.startFrequencyRange(builder);
  FrequencyRange.addLower(builder, LOWER);
  FrequencyRange.addUpper(builder, UPPER);
  return FrequencyRange.endFrequencyRange(builder);
}
}
