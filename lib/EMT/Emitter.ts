// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { Band } from './Band.js';
import { FrequencyRange } from './FrequencyRange.js';
import { PolarizationType } from './PolarizationType.js';
import { SimplePolarization } from './SimplePolarization.js';
import { StokesParameters } from './StokesParameters.js';


export class Emitter {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Emitter {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEmitter(bb:flatbuffers.ByteBuffer, obj?:Emitter):Emitter {
  return (obj || new Emitter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEmitter(bb:flatbuffers.ByteBuffer, obj?:Emitter):Emitter {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Emitter()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static bufferHasIdentifier(bb:flatbuffers.ByteBuffer):boolean {
  return bb.__has_identifier('$EMT');
}

ID():string|null
ID(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
ID(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

NAME():string|null
NAME(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
NAME(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

UPLINK(obj?:FrequencyRange):FrequencyRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new FrequencyRange()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

DOWNLINK(obj?:FrequencyRange):FrequencyRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? (obj || new FrequencyRange()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

BEACON(obj?:FrequencyRange):FrequencyRange|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new FrequencyRange()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

BAND(index: number, obj?:Band):Band|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Band()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

bandLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

POLARIZATION_TYPE():PolarizationType {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : PolarizationType.linear;
}

SIMPLE_POLARIZATION():SimplePolarization {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : SimplePolarization.vertical;
}

STOKES_PARAMETERS(obj?:StokesParameters):StokesParameters|null {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? (obj || new StokesParameters()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

POWER_REQUIRED():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

POWER_TYPE():string|null
POWER_TYPE(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
POWER_TYPE(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startEmitter(builder:flatbuffers.Builder) {
  builder.startObject(11);
}

static addId(builder:flatbuffers.Builder, IDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, IDOffset, 0);
}

static addName(builder:flatbuffers.Builder, NAMEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, NAMEOffset, 0);
}

static addUplink(builder:flatbuffers.Builder, UPLINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, UPLINKOffset, 0);
}

static addDownlink(builder:flatbuffers.Builder, DOWNLINKOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, DOWNLINKOffset, 0);
}

static addBeacon(builder:flatbuffers.Builder, BEACONOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, BEACONOffset, 0);
}

static addBand(builder:flatbuffers.Builder, BANDOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, BANDOffset, 0);
}

static createBandVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startBandVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addPolarizationType(builder:flatbuffers.Builder, POLARIZATION_TYPE:PolarizationType) {
  builder.addFieldInt8(6, POLARIZATION_TYPE, PolarizationType.linear);
}

static addSimplePolarization(builder:flatbuffers.Builder, SIMPLE_POLARIZATION:SimplePolarization) {
  builder.addFieldInt8(7, SIMPLE_POLARIZATION, SimplePolarization.vertical);
}

static addStokesParameters(builder:flatbuffers.Builder, STOKES_PARAMETERSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, STOKES_PARAMETERSOffset, 0);
}

static addPowerRequired(builder:flatbuffers.Builder, POWER_REQUIRED:number) {
  builder.addFieldFloat64(9, POWER_REQUIRED, 0.0);
}

static addPowerType(builder:flatbuffers.Builder, POWER_TYPEOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, POWER_TYPEOffset, 0);
}

static endEmitter(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static finishEmitterBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EMT');
}

static finishSizePrefixedEmitterBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, '$EMT', true);
}

}
